{"version":3,"file":"patron-components.min.mjs","sources":["../src/navigation/PageFetchTransport.ts","../src/navigation/Navigation.ts","../src/navigation/RouteDisplay.ts","../src/navigation/CurrentPage.ts","../src/controls/Input.ts","../src/controls/Visible.ts","../src/controls/Text.ts","../src/controls/Link.ts","../src/controls/ComputedElement.ts","../src/controls/ClassToggle.ts","../src/page/Page.ts","../src/page/EntryPointPage.ts"],"sourcesContent":["import { give, GuestType } from \"patron-oop\";\n\nexport interface RoutePageTransportType {\n  content(guest: GuestType<string>): void;\n}\n\nexport class PageFetchTransport implements RoutePageTransportType {\n  public constructor(\n    private basePath: string,\n    private template: string,\n  ) {}\n\n  public content(guest: GuestType<string>): void {\n    fetch(this.basePath + \"/\" + this.template)\n      .then((result) => {\n        return result.text();\n      })\n      .then((result) => {\n        give(result, guest);\n      });\n  }\n}\n","import {\n  FactoryType,\n  GuestChain,\n  Patron,\n  SourceType\n} from \"patron-oop\";\nimport { RoutePageTransportType } from \"src/navigation/PageFetchTransport\";\nimport { RouteDisplayType } from \"src/navigation/RouteDisplay\";\nimport { RoutePageType } from \"src/navigation/RoutePageType\";\n\nexport interface RouteDocument {\n  url: string;\n  template: string;\n  aliases?: string[];\n  page: RoutePageType;\n  default?: boolean;\n}\n\nexport class Navigation {\n  public constructor(\n    private loading: SourceType<boolean>,\n    private basePath: SourceType<string>,\n    private currentPage: SourceType<string>,\n    private display: RouteDisplayType,\n    private pageTransport: FactoryType<RoutePageTransportType>,\n  ) {}\n\n  public routes(routes: RouteDocument[]) {\n    const defaultRoute = routes.find((route) => route.default);\n    const chain = new GuestChain<{basePath: string, currentPage: string}>();\n    this.basePath.value(new Patron(chain.receiveKey(\"basePath\")));\n    this.currentPage.value(new Patron(chain.receiveKey(\"currentPage\")));\n    chain.result(\n      new Patron(({basePath, currentPage}) => {\n        basePath = basePath.replace(\"/#\", \"\");\n        let currentUrl = currentPage === \"/\" ? basePath + \"/\" : currentPage;\n        currentUrl = currentUrl.replace(\"#\", \"\").replace(\"//\", \"/\");\n        const routeMatchedToAlias = routes.find(\n          route => (route.aliases ?? []).includes(currentUrl) && route.url !== currentUrl\n        );\n\n        if (routeMatchedToAlias && routeMatchedToAlias.url !== currentPage) {\n          console.log('reload to corect url', routeMatchedToAlias, currentUrl);\n\n          // if matched to alias go to correct url\n          this.currentPage.give(routeMatchedToAlias.url);\n          return;\n        }\n\n        let route = routes.find(\n          (route) => basePath + route.url === currentUrl\n        );\n\n        if (!route && defaultRoute) {\n          route = defaultRoute;\n        }\n\n        if (route) {\n          this.loading.give(true);\n          this.pageTransport\n            .create(basePath, route.template)\n            .content((templateContent) => {\n              this.display.display(templateContent);\n              route.page.mounted();\n              this.loading.give(false);\n            });\n        }\n      }),\n    );\n  }\n}\n","export interface RouteDisplayType {\n  display(content: string): void;\n}\n\nexport class RouteDisplay implements RouteDisplayType {\n  public constructor(private selector: string) {}\n\n  public display(content: string): void {\n    const contentEl = document.querySelector(this.selector);\n    if (contentEl) {\n      contentEl.innerHTML = content;\n    }\n  }\n}\n","import {\n  GuestType,\n  Source,\n  SourceType\n} from \"patron-oop\";\n\nexport class CurrentPage implements SourceType<string> {\n  private source: SourceType<string>;\n\n  public constructor() {\n    const correctUrl = location.href.replace(location.origin, \"\");\n    this.source = new Source(correctUrl);\n  }\n\n  public give(value: string): this {\n    this.source.give(value);\n    return this;\n  }\n\n  public value(guest: GuestType<string>) {\n    this.source.value(guest);\n    return guest;\n  }\n}\n","import { GuestType, Patron, SourceType } from \"patron-oop\";\n\ntype InputValue = number | string;\n\nexport class Input implements SourceType<InputValue> {\n  public constructor(\n    private source: SourceType<InputValue>,\n    selector: string,\n  ) {\n    const el = document.querySelector(selector) as HTMLInputElement;\n    this.source.value(\n      new Patron((value) => {\n        el.value = String(value);\n      }),\n    );\n    el.addEventListener(\"keyup\", () => {\n      this.give(el.value);\n    });\n    el.addEventListener(\"change\", () => {\n      this.give(el.value);\n    });\n  }\n\n  public value(guest: GuestType<InputValue>) {\n    this.source.value(guest);\n    return this;\n  }\n\n  public give(value: InputValue) {\n    this.source.give(value);\n    return this;\n  }\n}\n","import { GuestObjectType } from \"patron-oop\";\n\nexport class Visible implements GuestObjectType<boolean> {\n  public constructor(private selector: string) {}\n\n  public give(isVisible: boolean): this {\n    const el = document.querySelector(this.selector) as HTMLElement;\n    if (el) {\n      el.style.display = isVisible ? \"block\" : \"none\";\n    }\n    return this;\n  }\n}\n","import { GuestObjectType } from \"patron-oop\";\n\nexport class Text implements GuestObjectType {\n  public constructor(private selector: string) {}\n\n  public give(value: unknown) {\n    const element = document.querySelector(this.selector) as HTMLElement;\n    if (element) {\n      element.innerText = String(value);\n    }\n    return this;\n  }\n}\n","import { GuestObjectType, SourceType } from \"patron-oop\";\n\nexport class Link {\n  public constructor(\n    private linkSource: GuestObjectType<string>,\n    private basePath: SourceType<string>,\n  ) {}\n\n  public watchClick(selector: string) {\n    const wrapperEl = document.querySelector(selector);\n    if (wrapperEl) {\n      wrapperEl.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        let href = (e?.target as HTMLElement)?.getAttribute(\"href\");\n        if (!href) {\n          href = (e?.currentTarget as HTMLElement)?.getAttribute(\"href\");\n        }\n        if (href) {\n          this.basePath.value((basePath) => {\n            this.linkSource.give(basePath + href);\n          });\n        }\n      });\n    } else {\n      throw new Error(`Link wrapper not found for selector ${selector}`);\n    }\n  }\n}\n","import {\n  give,\n  GuestAwareType,\n  GuestCast,\n  GuestChain,\n  GuestMiddle,\n  GuestType,\n} from \"patron-oop\";\n\ntype SourceDetailType = {\n  source: GuestAwareType;\n  placeholder: string;\n};\n\nexport class ComputedElement {\n  public constructor(\n    private sources: SourceDetailType[],\n    private selectorTemplate: string,\n  ) {}\n\n  public element(guest: GuestType<HTMLElement>) {\n    const chain = new GuestChain();\n    this.sources.forEach((source) => {\n      source.source.value(\n        new GuestCast(guest as GuestType, chain.receiveKey(source.placeholder)),\n      );\n    });\n\n    chain.result(\n      new GuestMiddle(\n        guest as GuestType,\n        (placeholders: Record<string, string>) => {\n          let selectorTemplate = this.selectorTemplate;\n\n          Object.entries(placeholders).map((entry) => {\n            selectorTemplate = selectorTemplate.replaceAll(entry[0], entry[1]);\n          });\n\n          const element = document.querySelector(\n            selectorTemplate,\n          ) as HTMLElement;\n          if (element) {\n            give(element, guest);\n          }\n        },\n      ),\n    );\n  }\n}\n","import { GuestObjectType } from \"patron-oop\";\n\nexport class ClassToggle implements GuestObjectType<HTMLElement> {\n  public constructor(\n    private toggleClass: string,\n    private resetClassSelector: string,\n  ) {}\n\n  public give(element: HTMLElement): this {\n    document.querySelectorAll(this.resetClassSelector).forEach((el) => {\n      el.classList.remove(this.toggleClass);\n    });\n    element.classList.add(this.toggleClass);\n    return this;\n  }\n}\n","import { RoutePageType } from \"../navigation\";\n\nexport class Page implements RoutePageType {\n  public constructor(private title: string) {}\n\n  public mounted() {\n    document.title = this.title;\n  }\n}\n","import { RoutePageType } from \"../navigation\";\n\nexport class EntryPointPage implements RoutePageType {\n  public constructor(\n    private title: string,\n    private entryPointUrl: string,\n  ) {}\n\n  public mounted() {\n    document.title = this.title;\n    import(this.entryPointUrl).then((module) => {\n      if (module.main) {\n        module.main();\n      }\n    });\n  }\n}\n"],"names":["PageFetchTransport","constructor","basePath","template","this","content","guest","fetch","then","result","text","give","Navigation","loading","currentPage","display","pageTransport","routes","defaultRoute","find","route","default","chain","GuestChain","value","Patron","receiveKey","replace","currentUrl","routeMatchedToAlias","aliases","includes","url","console","log","create","templateContent","page","mounted","RouteDisplay","selector","contentEl","document","querySelector","innerHTML","CurrentPage","__publicField","correctUrl","location","href","origin","source","Source","Input","el","String","addEventListener","Visible","isVisible","style","Text","element","innerText","Link","linkSource","watchClick","wrapperEl","Error","e","preventDefault","target","getAttribute","currentTarget","ComputedElement","sources","selectorTemplate","forEach","GuestCast","placeholder","GuestMiddle","placeholders","Object","entries","map","entry","replaceAll","ClassToggle","toggleClass","resetClassSelector","querySelectorAll","classList","remove","add","Page","title","EntryPointPage","entryPointUrl","import","module","main"],"mappings":"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"}